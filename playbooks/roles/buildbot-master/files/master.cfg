# -*- python -*-
# vim: set filetype=python :

from buildbot.plugins import changes, schedulers, steps, util, worker

c = BuildmasterConfig = {}

####### WORKERS

c['workers'] = [
    worker.Worker(
        'worker1',
        'somesupersecurepassword',
    ),
]

c['protocols'] = {
    'pb': {
        'port': 9989,
    },
}

####### CHANGESOURCES

c['change_source'] = []
# TODO: Add a changesource for the configuration repo

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.ForceScheduler(
    name='force_configuration_tests',
    builderNames=[
        'run_configuration_tests',
    ],
))

####### BUILDERS

# Factory for testing configuration repo
config_test_factory = util.BuildFactory()

CONFIG_VENV_DIR = util.Interpolate('%(prop:builddir)s/venv')
CONFIG_VENV_PYTHON = util.Interpolate('%s/bin/python', CONFIG_VENV_DIR)
CONFIG_VENV_ACTIVATE = util.Interpolate('%s/bin/activate', CONFIG_VENV_DIR)

config_test_factory.addStep(steps.Git(
    name='clone git repo',
    repourl='git://github.com/jspayd/configuration.git',
    mode='incremental',
    haltOnFailure=True,
))
config_test_factory.addStep(steps.ShellSequence(
    name='install dependencies',
    commands=[
        util.ShellArg(command=['sudo', 'apt-get', 'update']),
        util.ShellArg(command=['sudo', 'apt-get', 'install', '-y', 'nodejs']),
        util.ShellArg(command=['sudo', 'apt-get', 'install', '-y',
                               'python-demjson']),
        util.ShellArg(command=['virtualenv', '--clear', CONFIG_VENV_DIR]),
        util.ShellArg(command=[CONFIG_VENV_PYTHON, '-m', 'pip', 'install',
                               '--allow-all-external', '-r',
                               'requirements.txt']),
        util.ShellArg(command=[CONFIG_VENV_PYTHON, '-m', 'pip', 'install',
                               '--allow-all-external', 'demjson']),
    ],
    haltOnFailure=True,
))
config_test_factory.addStep(steps.ShellCommand(
    name='run tests',
    command=util.Interpolate('. "%s" && make test', CONFIG_VENV_ACTIVATE),
    haltOnFailure=True,
))

c['builders'] = []
c['builders'].append(util.BuilderConfig(
    name='run_configuration_tests',
    workernames=['worker1'],
    factory=config_test_factory,
))

####### BUILDBOT SERVICES

c['services'] = []

####### PROJECT IDENTITY

c['title'] = 'Lagunita'
c['titleURL'] = 'https://lagunita.stanford.edu/'
c['buildbotURL'] = 'http://localhost:8010/'
c['www'] = dict(
    port=8010,
    plugins=dict(
        waterfall_view={},
        console_view={},
    ),
)

####### DB URL

c['db'] = {
    'db_url': 'sqlite:///state.sqlite',
}
