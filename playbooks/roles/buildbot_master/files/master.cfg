# -*- python -*-
# vim: set filetype=python :

# TODO: Split into multiple files (perhaps one for each build factory)

from buildbot.plugins import changes, schedulers, steps, util, worker

c = BuildmasterConfig = {}

####### WORKERS

c['workers'] = [
    worker.Worker(
        'configuration_worker1',
        'somesupersecurepassword',
    ),
    worker.Worker(
        'edx_platform_worker1',
        'anothersupersecurepassword',
    ),
    worker.Worker(
        'edx_platform_worker2',
        'anothersupersecurepassword',
    ),
    worker.Worker(
        'edx_platform_worker3',
        'anothersupersecurepassword',
    ),
    worker.Worker(
        'edx_platform_worker4',
        'anothersupersecurepassword',
    ),
]

c['protocols'] = {
    'pb': {
        'port': 9989,
    },
}

####### CHANGESOURCES

c['change_source'] = []
# TODO: Add a changesource for the configuration and edx-platform repos

# c['change_source'].append(changes.GitHubPullRequestPoller(
#     owner='Stanford-Online',
#     repo='edx-platform',
# ))

####### SCHEDULERS
EDX_PLATFORM_TESTS = [
    'edx-platform-quality-tests',
    'edx-platform-lms-unit-tests',
    'edx-platform-cms-unit-tests',
    'edx-platform-js-unit-tests',
    'edx-platform-commonlib-unit-tests',
    'edx-platform-commonlib-js-unit-tests',
    'edx-platform-lms-acceptance-tests',
    'edx-platform-cms-acceptance-tests',
    'edx-platform-bok-choy-tests',
]

c['schedulers'] = []
# c['schedulers'].append(schedulers.AnyBranchScheduler(
#     name='edx-platform-pr-runtests',
#     treeStableTimer=600,
#     change_filter=util.ChangeFilter(
#         repository='git://github.com/Stanford-Online/edx-platform.git',
#     ),
#     builderNames=[
#         'edx-platform-requirements',
#     ],
# ))

c['schedulers'].append(schedulers.ForceScheduler(
    name='configuration-runtests',
    builderNames=[
        'configuration-runtests',
    ],
))
force_edx_platform_tests_scheduler = schedulers.ForceScheduler(
    name='edx-platform-runtests',
    builderNames=[
        'edx-platform-requirements',
    ],
)
c['schedulers'].append(force_edx_platform_tests_scheduler)
for test in EDX_PLATFORM_TESTS:
    c['schedulers'].append(schedulers.Dependent(
        name=test + '-dependent',
        upstream=c['schedulers'][len(c['schedulers'])-1],
        builderNames=[
            test,
        ],
    ))

# Schedulers to run single tests (must run requirements first)
c['schedulers'].append(schedulers.ForceScheduler(
    name='edx-platform-requirements',
    builderNames=[
        'edx-platform-requirements',
    ],
))
for test in EDX_PLATFORM_TESTS:
    c['schedulers'].append(schedulers.ForceScheduler(
        name=test,
        builderNames=[
            test,
        ],
    ))


####### BUILDERS

# Factory for testing configuration repo
config_test_factory = util.BuildFactory()

CONFIG_VENV_DIR = util.Interpolate('%(prop:builddir)s/venv')
CONFIG_VENV_PYTHON = util.Interpolate('%s/bin/python', CONFIG_VENV_DIR)
CONFIG_VENV_ACTIVATE = util.Interpolate('%s/bin/activate', CONFIG_VENV_DIR)

config_test_factory.addStep(steps.Git(
    name='Clone git repo',
    repourl='git://github.com/Stanford-Online/configuration.git',
    mode='incremental',
    haltOnFailure=True,
))
config_test_factory.addStep(steps.ShellSequence(
    name='Install requirements',
    commands=[
        util.ShellArg(
            logfile='Create virtualenv',
            command=['virtualenv', '--clear', CONFIG_VENV_DIR],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install requirements',
            command=[CONFIG_VENV_PYTHON, '-m', 'pip', 'install',
                     '--allow-all-external', '-r', 'requirements.txt'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install demjson',
            command=[CONFIG_VENV_PYTHON, '-m', 'pip', 'install',
                     '--allow-all-external', 'demjson'],
            haltOnFailure=True,
        ),
    ],
    haltOnFailure=True,
))
config_test_factory.addStep(steps.ShellCommand(
    name='Run tests',
    command=util.Interpolate('. "%s" && make test', CONFIG_VENV_ACTIVATE),
    haltOnFailure=True,
))

# Factories for testing the edx-platform repo
EDX_PLATFORM_VENV_DIR = util.Interpolate('%(prop:builddir)s/venv')
EDX_PLATFORM_VENV_PYTHON = util.Interpolate('%s/bin/python', CONFIG_VENV_DIR)
EDX_PLATFORM_VENV_ACTIVATE = util.Interpolate('%s/bin/activate',
                                              CONFIG_VENV_DIR)
EDX_PLATFORM_GEM_HOME = util.Interpolate('%(prop:builddir)s/.gem')
EDX_PLATFORM_GEM_BIN = util.Interpolate('%s/bin', EDX_PLATFORM_GEM_HOME)

EDX_PLATFORM_NODE_BIN = util.Interpolate(
                            '%(prop:builddir)s/build/node_modules/.bin',
                        )

EDX_PLATFORM_ENV = {
    'PYLINT_THRESHOLD': '4900',
    'JSHINT_THRESHOLD': '9080',
    'GEM_HOME': EDX_PLATFORM_GEM_HOME,
    'PATH': [
        EDX_PLATFORM_GEM_BIN,
        EDX_PLATFORM_NODE_BIN,
        '${PATH}',
    ],
}

edx_platform_requirements_factory = util.BuildFactory()
edx_platform_requirements_factory.addStep(steps.Git(
    name='Clone git repo',
    repourl='git://github.com/jspayd/edx-platform.git',
    branch='buildbot',
    mode='incremental',
    haltOnFailure=True,
))
edx_platform_requirements_factory.addStep(steps.ShellSequence(
    name='Install requirements',
    env=EDX_PLATFORM_ENV,
    timeout=2400,
    commands=[
        util.ShellArg(
            logfile='Install system requirements',
            command=['scripts/install-system-req.sh'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Create virtualenv',
            command=['virtualenv', '--clear', EDX_PLATFORM_VENV_DIR],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Make .gem directory',
            command=['mkdir', '-p', EDX_PLATFORM_GEM_HOME],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install npm packages',
            command=['npm', 'install'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install bundler packages',
            command=['bundle', 'install'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Remove stray gems',
            command=['bundle', 'clean', '--force'],
            haltOnFailure=False,
        ),
        util.ShellArg(
            logfile='Install pre requirements',
            command=[EDX_PLATFORM_VENV_PYTHON, '-m', 'pip', 'install',
                     '--exists-action', 'i', '-r',
                     'requirements/edx/pre.txt'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install github requirements',
            command=[EDX_PLATFORM_VENV_PYTHON, '-m', 'pip', 'install',
                     '--exists-action', 'i', '-r',
                     'requirements/edx/github.txt'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install stanford requirements',
            command=[EDX_PLATFORM_VENV_PYTHON, '-m', 'pip', 'install',
                     '--exists-action', 'i', '-r',
                     'requirements/edx/stanford.txt'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install local requirements',
            command=[EDX_PLATFORM_VENV_PYTHON, '-m', 'pip', 'install',
                     '--exists-action', 'i', '-r',
                     'requirements/edx/local.txt'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install base requirements',
            command=[EDX_PLATFORM_VENV_PYTHON, '-m', 'pip', 'install',
                     '--exists-action', 'i', '-r',
                     'requirements/edx/base.txt'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install paver requirements',
            command=[EDX_PLATFORM_VENV_PYTHON, '-m', 'pip', 'install',
                     '--exists-action', 'i', '-r',
                     'requirements/edx/paver.txt'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install post requirements',
            command=util.Interpolate(
                (
                    'if [ -e requirements/edx/post.txt ]; then '
                    '. "%s" ; '
                    'pip install --exists-action i -r '
                    'requirements/edx/post.txt ; '
                    'fi'
                ),
                EDX_PLATFORM_VENV_ACTIVATE,
            ),
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='Install coveralls',
            command=[EDX_PLATFORM_VENV_PYTHON, '-m', 'pip', 'install',
                     'coveralls==1.0'],
            haltOnFailure=True,
        ),
        util.ShellArg(
            logfile='List pip packages',
            command=[EDX_PLATFORM_VENV_PYTHON, '-m', 'pip', 'freeze'],
            haltOnFailure=True,
        ),
    ],
    haltOnFailure=True,
))

edx_platform_runtests_quality_factory = util.BuildFactory()
edx_platform_runtests_quality_factory.addStep(steps.ShellCommand(
    name='Run quality tests',
    env=EDX_PLATFORM_ENV,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'quality',
    ),
    haltOnFailure=True,
))

edx_platform_runtests_lms_unit_factory = util.BuildFactory()
edx_platform_runtests_lms_unit_factory.addStep(steps.ShellCommand(
    name='Run lms-unit tests',
    env=EDX_PLATFORM_ENV,
    timeout=3600,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'lms-unit',
    ),
    haltOnFailure=True,
))

edx_platform_runtests_cms_unit_factory = util.BuildFactory()
edx_platform_runtests_cms_unit_factory.addStep(steps.ShellCommand(
    name='Run cms-unit tests',
    env=EDX_PLATFORM_ENV,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'cms-unit',
    ),
    haltOnFailure=True,
))

edx_platform_runtests_js_unit_factory = util.BuildFactory()
edx_platform_runtests_js_unit_factory.addStep(steps.ShellCommand(
    name='Run js-unit tests',
    env=EDX_PLATFORM_ENV,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'js-unit',
    ),
    haltOnFailure=True,
))

edx_platform_runtests_commonlib_unit_factory = util.BuildFactory()
edx_platform_runtests_commonlib_unit_factory.addStep(steps.ShellCommand(
    name='Run commonlib-unit tests',
    env=EDX_PLATFORM_ENV,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'commonlib-unit',
    ),
    haltOnFailure=True,
))

edx_platform_runtests_commonlib_js_unit_factory = util.BuildFactory()
edx_platform_runtests_commonlib_js_unit_factory.addStep(steps.ShellCommand(
    name='Run commonlib-js-unit tests',
    env=EDX_PLATFORM_ENV,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'commonlib-js-unit',
    ),
    haltOnFailure=True,
))

edx_platform_runtests_lms_acceptance_factory = util.BuildFactory()
edx_platform_runtests_lms_acceptance_factory.addStep(steps.ShellCommand(
    name='Run lms-acceptance tests',
    env=EDX_PLATFORM_ENV,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'lms-acceptance',
    ),
    haltOnFailure=True,
))

edx_platform_runtests_cms_acceptance_factory = util.BuildFactory()
edx_platform_runtests_cms_acceptance_factory.addStep(steps.ShellCommand(
    name='Run cms-acceptance tests',
    env=EDX_PLATFORM_ENV,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'cms-acceptance',
    ),
    haltOnFailure=True,
))

edx_platform_runtests_bok_choy_factory = util.BuildFactory()
edx_platform_runtests_bok_choy_factory.addStep(steps.ShellCommand(
    name='Run bok-choy tests',
    env=EDX_PLATFORM_ENV,
    command=util.Interpolate(
        '. "%s" && TEST_SUITE="%s" ./scripts/generic-ci-tests.sh',
        EDX_PLATFORM_VENV_ACTIVATE,
        'bok-choy',
    ),
    haltOnFailure=True,
))

c['builders'] = []
c['builders'].append(util.BuilderConfig(
    name='configuration-runtests',
    workernames=[
        'configuration_worker1',
    ],
    factory=config_test_factory,
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-requirements',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_requirements_factory,
    workerbuilddir='edx-platform-tests'
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-quality-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_quality_factory,
    workerbuilddir='edx-platform-tests',
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-lms-unit-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_lms_unit_factory,
    workerbuilddir='edx-platform-tests',
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-cms-unit-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_cms_unit_factory,
    workerbuilddir='edx-platform-tests',
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-js-unit-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_js_unit_factory,
    workerbuilddir='edx-platform-tests',
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-commonlib-unit-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_commonlib_unit_factory,
    workerbuilddir='edx-platform-tests',
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-commonlib-js-unit-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_commonlib_js_unit_factory,
    workerbuilddir='edx-platform-tests',
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-lms-acceptance-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_lms_acceptance_factory,
    workerbuilddir='edx-platform-tests',
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-cms-acceptance-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_cms_acceptance_factory,
    workerbuilddir='edx-platform-tests',
))
c['builders'].append(util.BuilderConfig(
    name='edx-platform-bok-choy-tests',
    workernames=[
        'edx_platform_worker1',
    ],
    factory=edx_platform_runtests_bok_choy_factory,
    workerbuilddir='edx-platform-tests',
))

####### BUILDBOT SERVICES

c['services'] = []

####### PROJECT IDENTITY

c['title'] = 'Lagunita'
c['titleURL'] = 'https://lagunita.stanford.edu/'
c['buildbotURL'] = 'http://localhost:8010/'
c['www'] = dict(
    port=8010,
    plugins=dict(
        waterfall_view={},
        console_view={},
    ),
)

####### DB URL

c['db'] = {
    'db_url': 'sqlite:///state.sqlite',
}
